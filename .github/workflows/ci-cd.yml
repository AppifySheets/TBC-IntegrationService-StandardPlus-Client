# CI/CD Pipeline for TBC IntegrationService Client
# Uses centralized workflows from AppifySheets/github-workflows repository
name: CI/CD Pipeline

on:
  # Trigger on pushes to main branch
  push:
    branches: [ main ]
    # Trigger on version tags (e.g., v1.0.0)
    tags: [ 'v*' ]
  
  # Trigger on pull requests to main
  pull_request:
    branches: [ main ]
  
  # Allow manual workflow dispatch
  workflow_dispatch:
    inputs:
      publish-packages:
        description: 'Publish NuGet packages'
        required: false
        type: boolean
        default: false

jobs:
  # Build and test job - runs on all triggers
  build-test:
    name: Build and Test
    uses: AppifySheets/github-workflows/.github/workflows/dotnet-build-test.yml@master
    with:
      # Find and build the solution file
      solution-path: '*.sln'
      # Use .NET 8.0
      dotnet-version: '8.0.x'
      # Find and run all test projects
      test-projects: '**/*Tests.csproj'
      # Build in Release configuration
      build-configuration: 'Release'
      # Run tests
      run-tests: true
      # Upload test results for visibility in PR
      upload-test-results: true
      # Upload code coverage reports
      upload-coverage: false

  # Publish NuGet packages - only on version tags or manual dispatch
  publish-nuget:
    name: Publish NuGet Packages
    # Only run on version tags or manual dispatch with publish flag
    if: |
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.publish-packages == 'true')
    needs: build-test
    uses: AppifySheets/github-workflows/.github/workflows/dotnet-nuget-publish.yml@master
    with:
      # Package both the client library and the immutable types library
      project-paths: |
        AppifySheets.TBC.IntegrationService.Client/AppifySheets.TBC.IntegrationService.Client.csproj;
        AppifySheets.Immutable.BankIntegrationTypes/AppifySheets.Immutable.BankIntegrationTypes.csproj
      # Use .NET 8.0
      dotnet-version: '8.0.x'
      # Build in Release configuration
      build-configuration: 'Release'
      # Version will be extracted from tag or project file
      package-version: ''
      # Include symbol packages for debugging
      include-symbols: true
      # Include source in packages
      include-source: true
      # Push to NuGet.org
      push-to-nuget: true
      # Validate packages before publishing
      validate-package: true
    secrets:
      # Pass the NuGet API key from repository secrets
      nuget-api-key: ${{ secrets.NUGET_API_KEY }}

  # Create GitHub release - only on version tags
  create-release:
    name: Create GitHub Release
    # Only run on version tags
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: publish-nuget
    uses: AppifySheets/github-workflows/.github/workflows/github-release.yml@master
    with:
      # Use the tag as release name
      tag-name: ${{ github.ref_name }}
      # Auto-generate release notes from commits
      generate-notes: true
      # Mark as prerelease if version contains prerelease identifiers
      prerelease: ${{ contains(github.ref_name, '-alpha') || contains(github.ref_name, '-beta') || contains(github.ref_name, '-rc') || contains(github.ref_name, '-preview') }}
      # Don't create as draft
      draft: false
      # Attach the NuGet packages to the release
      attach-artifacts: 'nuget-packages'
      # Create discussion for major releases
      discussion-category: ${{ startsWith(github.ref_name, 'v1.') && 'announcements' || '' }}

  # Status check job - provides single status for branch protection
  status-check:
    name: CI Status
    if: always()
    needs: [build-test]
    runs-on: ubuntu-latest
    steps:
      - name: Check status
        run: |
          # Check if all required jobs succeeded
          if [[ "${{ needs.build-test.result }}" != "success" ]]; then
            echo "Build and test failed"
            exit 1
          fi
          echo "âœ… All checks passed!"